openapi: 3.0.3
info:
  title: MeterData
  version: 0.3.0
  description: API to create, read, and update meter readings.
tags:
  - name: MeterData
    description: API to create, read, and update meter data.
paths:
  /api/v1/meter-data/search:
    post:
      tags:
        - MeterData
      operationId: get-meter-data
      summary: Find meter data by meter and customer EIC, period, and optionally resolution
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                meterEic:
                  $ref: '#/components/schemas/eic'
                periodStart:
                  $ref: '#/components/schemas/dateTime'
                periodEnd:
                  $ref: '#/components/schemas/dateTime'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
                - meterEic
                - periodStart
                - pagination
      description: >-
        Submit the meter identifications, timeframe to receive the meter reading data
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: object
                properties:
                  meterEic:
                    $ref: '#/components/schemas/eic'
                  commodityType:
                    $ref: '#/components/schemas/commodityType'
                  periods:
                    type: array
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/period'
                  pagination:
                    $ref: '#/components/schemas/pagingResponse'
                required:
                  - meterEic
                  - period
                  - pagination
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/meter-data:
    post:
      tags:
        - MeterData
      operationId: create-meter-data
      summary: Create or update meter reading data
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                meterData:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/meterData'
              required:
                - marketParticipantContext
                - meterData
        description: >-
          Submit the meter reading data object to create the meter reading
      responses:
        '201':
          description: Created
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            text/plain:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/meter-data/status:
    post:
      tags:
        - MeterData
      operationId: get-meter-data-status
      summary: Find meter data processing status by document and issuer identification
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                meterDataStatusAttributes:
                  $ref: '#/components/schemas/meterDataStatusAttributes'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
                - meterDataStatusAttributes
                - pagination
      description: >-
        Submit the sender and document identification to receive the processing status
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: object
                properties:
                  meterDataStatuses:
                    type: array
                    items:
                      $ref: '#/components/schemas/meterDataStatus'
                  pagination:
                    $ref: '#/components/schemas/pagingResponse'
                required:
                  - meterDataStatuses
                  - pagination
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/meter-data/change:
    post:
      tags:
        - MeterData
      operationId: get-meter-data-change
      summary: Find metering points where data was changed within the defined period - NOT IMPLEMENTED
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                updatePeriodStart:
                  $ref: '#/components/schemas/dateTime'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
                - updatePeriodStart
                - pagination
      description: >-
        Submit the modification period to receive a list of metering points where data has changed during the marked time interval
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: object
                properties:
                  meterEic:
                    $ref: '#/components/schemas/eic'
                  commodityType:
                    $ref: '#/components/schemas/commodityType'
                  periods:
                    type: array
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/period'
                  pagination:
                    $ref: '#/components/schemas/pagingResponse'
                required:
                  - meterEic
                  - period
                  - pagination
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/meter-data/export:
    post:
      tags:
        - MeterData
      operationId: export-meter-data
      summary: Export meter data by meter and customer EIC, period, and resolution
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                meterEic:
                  $ref: '#/components/schemas/eic'
                periodStart:
                  $ref: '#/components/schemas/dateTime'
                periodEnd:
                  $ref: '#/components/schemas/dateTime'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
      description: >-
        Submit the meter identifications, timeframe to receive the meter reading data in excel
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/octet-stream:
              schema:
                # a binary file of any type
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example:
        > Authorization: Bearer <token>
  schemas:
    dateTime:
      type: string
      format: date-time
      description: ISO 8601 zone datetime
    uniqueId:
      type: string
      format: uuid
      description: UUID
    statusCode:
      type: integer
      description: HTTP status code
      minLength: 3
      maxLength: 3
    eic:
      type: string
      format: eic
      description: EIC code
      minLength: 16
      maxLength: 16
      # RegEx to verify the EIC format, semantic verification is part of content validation
      pattern: >-
        \d{2}[XYZWTVA][A-Z0-9\-]{12}[A-Z0-9]
    commodityType:
      type: string
      enum: [ ELECTRICITY, NATURAL_GAS ]
    serviceProviderRole:
      type: string
      enum: [ OPEN_SUPPLIER, GRID_OPERATOR, LINE_OPERATOR, CLOSED_DISTRIBUTION_NETWORK, PRODUCER_OPERATOR, CHARGING_POINT_OPERATOR, AGGREGATOR, ENERGY_SERVICE_PROVIDER ]
    status:
      type: object
      properties:
        originalDocumentIdentification:
          $ref: '#/components/schemas/uniqueId'
        statusCode:
          $ref: '#/components/schemas/statusCode'
        reasonText:
          type: string
          description: Textual reason of the response
    readingType:
      type: string
      description: Meter reading quality type
      enum: [ E, M ]
    resolution:
      type: string
      enum: [ PT15M, PT1H, P1D ]
    meterData:
      type: object
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        periods:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/period'
      required:
        - meterEic
    period:
      type: object
      properties:
        r:
          $ref: '#/components/schemas/resolution'
        aI:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/accountInterval'
      required:
        - r
        - aI
    accountInterval:
      type: object
      description: Meter reading period item
      properties:
        pS:
          $ref: '#/components/schemas/dateTime'
        inQty:
          $ref: '#/components/schemas/measurement'
        outQty:
          $ref: '#/components/schemas/measurement'
      required:
        - pS
    measurement:
      type: object
      description: Measurement result
      properties:
        rTime:
          $ref: '#/components/schemas/dateTime'
        rType:
          $ref: '#/components/schemas/readingType'
        kwh:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.001
        m3:
          type: number
          format: decimal
          minimum: 0
          multipleOf: 0.001
    getMeterData:
      type: object
      description: Attributes to request meter readings
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        periodStart:
          $ref: '#/components/schemas/dateTime'
        periodEnd:
          $ref: '#/components/schemas/dateTime'
      required:
        - meterEic
        - periodStart
    marketParticipantContext:
      type: object
      properties:
        marketParticipantIdentification:
          $ref: '#/components/schemas/eic'
        marketParticipantRole:
          $ref: '#/components/schemas/serviceProviderRole'
        commodityType:
          $ref: '#/components/schemas/commodityType'
      required:
        - marketParticipantIdentification
        - marketParticipantRole
        - commodityType
    meterDataCommonResponse:
      type: object
      description: Common meter data metadata
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
      required:
        - meterEic
    pagingRequest:
      type: object
      description: Pagination controls
      properties:
        page:
          type: integer
          minimum: 0
        pageSize:
          type: integer
          minimum: 1
      required:
        - page
        - pageSize
    pagingResponse:
      type: object
      description: Pagination controls
      properties:
        page:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 1
    badRequest:
      type: object
      description: Bad Request
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unauthorized:
      type: object
      description: Unauthorized
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    forbidden:
      type: object
      description: Forbidden
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    notFound:
      type: object
      description: Not found
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unprocessableEntity:
      type: object
      description: Unprocessable entity
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    defaultProblem:
      type: object
      description: Default problem object
      properties:
        code:
          type: string
        message:
          type: string
        cause:
          $ref: '#/components/schemas/defaultProblem'
    meterDataStatusAttributes:
      type: object
      properties:
        originalDocumentIdentification:
          type: string
          format: uuid
        createdTimeFrom:
          $ref: '#/components/schemas/dateTime'
        createdTimeTo:
          $ref: '#/components/schemas/dateTime'
        status:
          type: string
          enum: [ PROCESSING, SUCCESSFUL, ERROR ]
      required:
        - createdTimeFrom
        - createdTimeTo
    meterDataStatus:
      type: object
      properties:
        originalDocumentIdentification:
          type: string
          format: uuid
        senderEic:
          $ref: '#/components/schemas/eic'
        createdTime:
          $ref: '#/components/schemas/dateTime'
        status:
          type: string
          enum: [ PROCESSING, SUCCESSFUL, ERROR ]
        statusMessage:
          type: string
      required:
        - originalDocumentIdentification
        - senderEic
        - createdTime
        - status
  headers:
    status:
      deprecated: false
      required: false
      schema:
        $ref: '#/components/schemas/statusCode'
    x-document-date-time:
      deprecated: false
      required: true
      schema:
        $ref: '#/components/schemas/dateTime'
    x-document-identification:
      deprecated: false
      required: true
      schema:
        $ref: '#/components/schemas/uniqueId'
    x-original-document-identification:
      deprecated: false
      required: false
      schema:
        $ref: '#/components/schemas/uniqueId'
  responses:
    badRequest:
      description: Bad Request
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: Unauthorized
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorized'
    forbidden:
      description: Forbidden
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    notFound:
      description: Not found
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessableEntity:
      description: Unprocessable entity
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unprocessableEntity'
servers:
  - url: https://test-datahub.elering.ee
security:
  - JWTAuth: [ ]
