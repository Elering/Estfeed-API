openapi: 3.0.3
info:
  title: GridAgreementMeteringPoint
  version: 0.1.0
  description: API to create metering point and grid agreement in one call
tags:
  - name: GridAgreementMeteringPoint
    description: API to create metering point and grid agreement in one call
paths:
  /api/v1/gridagreementmeteringpoint:
    post:
      tags:
        - GridAgreementMeteringPoint
      operationId: request-agreement-with-meter
      summary: Create meter with metadata and connected grid agreement - NOT IMPLEMENTED
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                gridAgreementMeteringPoint:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      meterMetadata:
                        $ref: '#/components/schemas/meterMetadata'
                      agreement:
                        $ref: '#/components/schemas/agreement'
                    required:
                      - meterMetadata
                      - agreement
              required:
                - marketParticipantContext
                - gridAgreementMeteringPoint
        description: >-
          Submit the meter metadata object to create the meter
      responses:
        '201':
          description: Created
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/agreementCommonResponse'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example:
        > Authorization: Bearer <token>
  schemas:
    dateTime:
      type: string
      format: date-time
      description: ISO 8601 zone datetime
    date:
      type: string
      format: date
      description: ISO 8601 date
    uniqueId:
      type: string
      format: uuid
      description: UUID
    statusCode:
      type: integer
      description: HTTP status code
    eic:
      type: string
      format: eic
      description: EIC code
      minLength: 16
      maxLength: 16
      # RegEx to verify the EIC format, semantic verification is part of content validation
      pattern: >-
        \d{2}[XYZWTVA][A-Z0-9\-]{12}[A-Z0-9]
    commodityType:
      type: string
      enum: [ ELECTRICITY, NATURAL_GAS ]
    agreementType:
      type: string
      description: Agreement type (agreement type BORDER_SUPPLY, GENERAL_SERVICE cannot be created manually, do not use them!)
      enum: [ GRID, SUPPLY, AGGREGATION, NAMED_SUPPLIER, PORTFOLIO_SUPPLIER, JOINT_INVOICE, BORDER_GRID, BORDER_SUPPLY, GENERAL_SERVICE ]
    serviceProviderRole:
      type: string
      enum: [ OPEN_SUPPLIER, GRID_OPERATOR, LINE_OPERATOR, CLOSED_DISTRIBUTION_NETWORK, PRODUCER_OPERATOR, CHARGING_POINT_OPERATOR, AGGREGATOR, ENERGY_SERVICE_PROVIDER ]
    meteringType:
      type: string
      enum: [ REMOTE_READING, VIRTUAL, NON_REMOTE_READING ]
    meteringPointType:
      type: string
      enum: [ BORDER, AGGREGATION, REGULAR, INTERNAL ]
    consumptionScale:
      type: string
      enum: [ SMALL, LARGE ]
    connectionState:
      type: string
      enum: [ CONNECTED, DISCONNECTED ]
    resolutionElectricity:
      type: string
      enum: [ PT15M, PT1H ]
    resolutionGas:
      type: string
      enum: [ PT1H, P1D ]
    customerTypeElectricity:
      type: string
      enum: [ CONSUMER, GRID_OPERATOR, PRODUCER, MICRO, LINE_OPERATOR, ENERGY_STORAGE_UNIT, CHARGING_POINT_OPERATOR ]
    customerTypeGas:
      type: string
      enum: [ CONSUMER, CONSUMER_2, GRID_OPERATOR, PRODUCER, PROTECTED, PROTECTED_OTHER, GENERAL_INTEREST_SERVICE_PROVIDER, POWER_PRODUCER_FROM_GAS, LNG_OPERATOR ]
    production:
      type: boolean
    productionSourceElectricity:
      type: string
      enum: [ SOLAR, WIND, HYDRO, BIOGAS, BIOMASS, NATURAL_GAS, OIL_SHALE, OTHER_RENEWABLE, OTHER_NON_RENEWABLE ]
    productionSourceGas:
      type: string
      enum: [ BIOGAS ]
    transmissionNetwork:
      type: string
    apartmentAssociation:
      type: boolean
    isolatedMeteringPoint:
      type: boolean
    electricalHeating:
      type: boolean
    chargingPoint:
      type: boolean
    storageCapacity:
      type: number
      minimum: 0
      multipleOf: 0.01
    storageEnergy:
      type: number
      minimum: 0
      multipleOf: 0.01
    productionCapacity:
      type: number
      minimum: 0
      multipleOf: 0.01
    transmissionCapacity:
      type: number
      minimum: 0
      multipleOf: 0.01
    meterCommon:
      type: object
      description: Common meter metadata
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        commodityType:
          $ref: '#/components/schemas/commodityType'
        meteringType:
          $ref: '#/components/schemas/meteringType'
        meteringPointType:
          $ref: '#/components/schemas/meteringPointType'
      required:
        - meterEic
        - commodityType
        - meteringType
    agreementCommonResponse:
      type: object
      description: Common meter metadata
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        commodityType:
          $ref: '#/components/schemas/commodityType'
        meteringType:
          $ref: '#/components/schemas/meteringType'
        meteringPointType:
          $ref: '#/components/schemas/meteringPointType'
        meterVersion:
          type: integer
          minimum: 1
        agreementId:
          type: string
          maxLength: 50
        agreementVersion:
          type: integer
          minimum: 1
      required:
        - meterEic
        - commodityType
        - meteringType
        - meteringPointType
        - meterVersion
        - agreementId
        - agreementVersion
    electricityCharacteristics:
      type: object
      description: Electricity characteristics
      properties:
        consumptionScale:
          $ref: '#/components/schemas/consumptionScale'
        connectionState:
          $ref: '#/components/schemas/connectionState'
        resolution:
          $ref: '#/components/schemas/resolutionElectricity'
        customerType:
          $ref: '#/components/schemas/customerTypeElectricity'
        production:
          $ref: '#/components/schemas/production'
        productionSource:
          $ref: '#/components/schemas/productionSourceElectricity'
        transmissionNetwork:
          $ref: '#/components/schemas/transmissionNetwork'
        apartmentAssociation:
          $ref: '#/components/schemas/apartmentAssociation'
        isolatedMeteringPoint:
          $ref: '#/components/schemas/isolatedMeteringPoint'
        electricalHeating:
          $ref: '#/components/schemas/electricalHeating'
        chargingPoint:
          $ref: '#/components/schemas/chargingPoint'
        storageCapacity:
          $ref: '#/components/schemas/storageCapacity'
        storageEnergy:
          $ref: '#/components/schemas/storageEnergy'
        productionCapacity:
          $ref: '#/components/schemas/productionCapacity'
        transmissionCapacity:
          $ref: '#/components/schemas/transmissionCapacity'
    naturalGasCharacteristics:
      type: object
      description: Gas characteristics
      properties:
        consumptionScale:
          $ref: '#/components/schemas/consumptionScale'
        connectionState:
          $ref: '#/components/schemas/connectionState'
        resolution:
          $ref: '#/components/schemas/resolutionGas'
        customerType:
          $ref: '#/components/schemas/customerTypeGas'
        production:
          $ref: '#/components/schemas/production'
        productionSource:
          $ref: '#/components/schemas/productionSourceGas'
        transmissionNetwork:
          $ref: '#/components/schemas/transmissionNetwork'
        apartmentAssociation:
          $ref: '#/components/schemas/apartmentAssociation'
    aggregatorCharacteristics:
      type: object
      description: Aggregator characteristics
      properties:
        parentMeterEic:
          $ref: '#/components/schemas/eic'
    location:
      type: object
      description: Location object
      properties:
        adrId:
          type: integer
        comment:
          type: string
          maxLength: 255
      required:
        - adrId
    meterMetadata:
      type: object
      description: >-
        Meter metadata object (full dataset).
        All of the following meterMetadata properties are required in the request:
          - location
          - meterCommon
        The following validation needs to be implemented manually. Exactly one of the meterMetadata properties are required in the request:
          - electricityCharacteristics
          - naturalGasCharacteristics
          - aggregatorCharacteristics
      properties:
        meterCommon:
          $ref: '#/components/schemas/meterCommon'
        location:
          $ref: '#/components/schemas/location'
        electricityCharacteristics:
          $ref: '#/components/schemas/electricityCharacteristics'
        naturalGasCharacteristics:
          $ref: '#/components/schemas/naturalGasCharacteristics'
        aggregatorCharacteristics:
          $ref: '#/components/schemas/aggregatorCharacteristics'
      required:
        - meterCommon
        - location
    agreement:
      type: object
      properties:
        agreementId:
          $ref: '#/components/schemas/eic'
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
          type: boolean
        commodityType:
          $ref: '#/components/schemas/commodityType'
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
      required:
        - agreementType
        - serviceProviderEic
        - customerEic
        - commodityType
        - validFrom
    marketParticipantContext:
      type: object
      properties:
        marketParticipantIdentification:
          $ref: '#/components/schemas/eic'
        marketParticipantRole:
          $ref: '#/components/schemas/serviceProviderRole'
        commodityType:
          $ref: '#/components/schemas/commodityType'
      required:
        - marketParticipantIdentification
        - marketParticipantRole
        - commodityType
    badRequest:
      type: object
      description: Bad Request
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unauthorized:
      type: object
      description: Unauthorized
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    forbidden:
      type: object
      description: Forbidden
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    notFound:
      type: object
      description: Not found
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unprocessableEntity:
      type: object
      description: Unprocessable entity
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    defaultProblem:
      type: object
      description: Default problem object
      properties:
        code:
          type: string
        message:
          type: string
        cause:
          $ref: '#/components/schemas/defaultProblem'
  responses:
    badRequest:
      description: Bad Request
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: Unauthorized
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorized'
    forbidden:
      description: Forbidden
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    notFound:
      description: Not found
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessableEntity:
      description: Unprocessable entity
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unprocessableEntity'
servers:
  - url: https://test-datahub.elering.ee
security:
  - JWTAuth: [ ]
