openapi: 3.0.3
info:
  title: Agreement
  version: 0.2.0
  description: API to create, read, and update agreements.
tags:
  - name: Agreement
    description: API to create, read, and update agreements.
paths:
  /api/v1/agreement/search:
    post:
      tags:
        - Agreement
      operationId: get-agreement
      summary: Find agreements by type and metering point, and optionally period
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                agreementAttributes:
                  $ref: '#/components/schemas/agreementAttributes'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
                - agreementAttributes
                - pagination
      description: >-
        Submit at least the customer identification or meter identification or agreement ID to receive the agreement details, with optional filtering using the period or agreement type.
        The OpenAPI generator does not provide configuration options to make at least one element of a given property list required, therefore the following validation needs to be implemented manually.
        At least one of the following agreementsAttributes properties are required in the request:
          - agreementId
          - meterEic
          - customerEic
          - serviceProviderEic
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: object
                properties:
                  agreements:
                    type: array
                    items:
                      $ref: '#/components/schemas/agreementResponse'
                  commodityType:
                    $ref: '#/components/schemas/commodityType'
                  pagination:
                    $ref: '#/components/schemas/pagingResponse'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/agreement:
    post:
      tags:
        - Agreement
      operationId: create-agreement
      summary: Create an agreement
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createAgreementRequest'
        description: >-
          Submit the agreement object(s) to create agreements.
          BORDER_SUPPLY and GENERAL_SERVICE agreements are created and modified by the system automatically!
      responses:
        '201':
          description: Created
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agreement'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
    put:
      tags:
        - Agreement
      operationId: update-agreement
      summary: Update agreements
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgreementRequest'
        description: >-
          Submit agreement object(s) to update the matching agreements.
          BORDER_SUPPLY and GENERAL_SERVICE agreements are created and modified by the system automatically!
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agreement'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/agreement/delete:
    post:
      tags:
        - Agreement
      operationId: delete-agreement
      summary: Delete agreement by submitting an identical request
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                agreement:
                  $ref: '#/components/schemas/deleteAgreement'
              required:
                - marketParticipantContext
                - agreement
      description: >-
        Submit agreement object(s) to delete the matching agreements.
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'

  /api/v1/agreement/export:
    post:
      tags:
        - Agreement
      operationId: export-agreements
      summary: Export agreements by attributes
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                agreementAttributes:
                  $ref: '#/components/schemas/agreementAttributes'
                pagination:
                  $ref: '#/components/schemas/pagingRequest'
              required:
                - marketParticipantContext
                - agreementAttributes
      description: >-
        Submit at least the customer identification or meter identification or agreement ID to receive the agreement details, with optional filtering using the period or agreement type.
        The OpenAPI generator does not provide configuration options to make at least one element of a given property list required, therefore the following validation needs to be implemented manually.
        At least one of the following agreementsAttributes properties are required in the request:
          - agreementId
          - meterEic
          - customerEic
          - serviceProviderEic
        The export produces an XLSX file as output.
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/octet-stream:
              schema:
                # a binary file of any type
                type: string
                format: binary
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/agreement/change:
    post:
      tags:
        - Agreement
      operationId: get-agreement-change
      summary: Return agreements that were created or updated after the marked point in time - NOT IMPLEMENTED
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                updatePeriodStart:
                  $ref: '#/components/schemas/dateTime'
                agreementType:
                  $ref: '#/components/schemas/agreementType'
              required:
                - marketParticipantContext
                - updatePeriodStart
      description: >-
        Submit the service provider (as part of the marketParticipantContext) and the start datetime to receive periodic changes of balance group assignment.
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                type: object
                properties:
                  agreements:
                    type: array
                    items:
                      $ref: '#/components/schemas/agreementResponse'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example:
        > Authorization: Bearer <token>
  schemas:
    identityType:
      type: string
      enum: [ EIC, PERSONAL_ID, DOCUMENT_ID, COMPANY_ID, EMBASSY_ID ]
    identityExtension:
      type: object
      properties:
        extensionType:
          $ref: '#/components/schemas/extensionType'
        extensionValue:
          type: string
          maxLength: 250
    extensionType:
      type: string
      enum: [ COUNTRY ]
    metadataType:
      type: string
      enum: [ FIRST_NAME, LAST_NAME, COMPANY_NAME, ORGANIZATION_NAME, CONTACT_PHONE, EMAIL ]
    metadata:
      type: object
      properties:
        metadataType:
          $ref: '#/components/schemas/metadataType'
        metadataValue:
          type: string
          maxLength: 250
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
      required:
        - metadataType
        - metadataValue
    customerId:
      type: object
      properties:
        externalId:
          type: string
        identityValue:
          type: string
        identityType:
          $ref: '#/components/schemas/identityType'
        identityExtension:
          type: array
          items:
            $ref: '#/components/schemas/identityExtension'
      required:
        - externalId
        - identityType
        - identityValue
    dateTime:
      type: string
      format: date-time
      description: ISO 8601 zone datetime
    uniqueId:
      type: string
      format: uuid
      description: UUID
    statusCode:
      type: integer
      description: HTTP status code
      minLength: 3
      maxLength: 3
    eic:
      type: string
      format: eic
      description: EIC code
      minLength: 16
      maxLength: 16
      # RegEx to verify the EIC format, semantic verification is part of content validation
      pattern: >-
        \d{2}[XYZWTVA][A-Z0-9\-]{12}[A-Z0-9]
    activeOnly:
      type: boolean
    commodityType:
      type: string
      enum: [ ELECTRICITY, NATURAL_GAS ]
    agreementType:
      type: string
      description: Agreement type (agreement type BORDER_SUPPLY, GENERAL_SERVICE cannot be created manually, do not use them!)
      enum: [ GRID, SUPPLY, AGGREGATION, NAMED_SUPPLIER, PORTFOLIO_SUPPLIER, JOINT_INVOICE, BORDER_GRID, BORDER_SUPPLY, GENERAL_SERVICE ]
    serviceProviderRole:
      type: string
      enum: [ OPEN_SUPPLIER, GRID_OPERATOR, LINE_OPERATOR, CLOSED_DISTRIBUTION_NETWORK, PRODUCER_OPERATOR, CHARGING_POINT_OPERATOR, AGGREGATOR,  ENERGY_SERVICE_PROVIDER ]
    pagingRequest:
      type: object
      description: Pagination controls
      properties:
        page:
          type: integer
          minimum: 0
        pageSize:
          type: integer
          minimum: 1
      required:
        - page
        - pageSize
    pagingResponse:
      type: object
      description: Pagination controls
      properties:
        page:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 1
    agreement:
      type: object
      properties:
        agreementId:
          type: string
          maxLength: 50
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
          type: boolean
        commodityType:
          $ref: '#/components/schemas/commodityType'
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
      required:
        - agreementType
        - serviceProviderEic
        - customerEic
        - commodityType
        - validFrom
    deleteAgreement:
      type: object
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        commodityType:
          $ref: '#/components/schemas/commodityType'
        validFrom:
          $ref: '#/components/schemas/dateTime'
      required:
        - agreementType
        - serviceProviderEic
        - customerEic
        - commodityType
        - validFrom
    agreementResponse:
      type: object
      properties:
        agreementId:
          type: string
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
          type: boolean
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
        version:
          type: integer
          minimum: 1
        customerIds:
          type: array
          items:
            $ref: '#/components/schemas/customerId'
        customerMetadata:
          type: array
          items:
            $ref: '#/components/schemas/metadata'
        serviceProviderMetadata:
          type: array
          items:
            $ref: '#/components/schemas/metadata'
      required:
        - agreementId
        - meterEic
        - agreementType
        - serviceProviderEic
        - customerEic
        - validFrom
        - version
    agreementChange:
      type: object
      properties:
        agreementId:
          type: string
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
          type: boolean
        commodityType:
          $ref: '#/components/schemas/commodityType'
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
      required:
        - agreementType
        - serviceProviderEic
        - customerEic
        - commodityType
        - validFrom
    agreementAttributes:
      type: object
      properties:
        agreementId:
          type: string
          maxLength: 50
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementTypes:
          type: array
          items:
            $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        commodityType:
          $ref: '#/components/schemas/commodityType'
        preliminaryTerminationFee:
          type: boolean
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
        activeOnly:
          $ref: '#/components/schemas/activeOnly'
      required:
        - commodityType
        - activeOnly
    createAgreementRequest:
      type: object
      properties:
        marketParticipantContext:
          $ref: '#/components/schemas/marketParticipantContext'
        agreement:
          $ref: '#/components/schemas/agreement'
      required:
        - marketParticipantContext
        - agreement
    updateAgreementRequest:
      type: object
      properties:
        marketParticipantContext:
          $ref: '#/components/schemas/marketParticipantContext'
        agreementChange:
          $ref: '#/components/schemas/agreementChange'
      required:
        - marketParticipantContext
        - agreementChange
    marketParticipantContext:
      type: object
      properties:
        marketParticipantIdentification:
          $ref: '#/components/schemas/eic'
        marketParticipantRole:
          $ref: '#/components/schemas/serviceProviderRole'
        commodityType:
          $ref: '#/components/schemas/commodityType'
      required:
        - marketParticipantIdentification
        - marketParticipantRole
        - commodityType
    badRequest:
      type: object
      description: Bad Request
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unauthorized:
      type: object
      description: Unauthorized
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    forbidden:
      type: object
      description: Forbidden
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    notFound:
      type: object
      description: Not found
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unprocessableEntity:
      type: object
      description: Unprocessable entity
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    defaultProblem:
      type: object
      description: Default problem object
      properties:
        code:
          type: string
        message:
          type: string
        cause:
          $ref: '#/components/schemas/defaultProblem'
  responses:
    badRequest:
      description: Bad Request
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: Unauthorized
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorized'
    forbidden:
      description: Forbidden
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    notFound:
      description: Not found
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessableEntity:
      description: Unprocessable entity
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unprocessableEntity'
servers:
  - url: https://test-datahub.elering.ee
security:
  - JWTAuth: []
