openapi: 3.0.3
info:
  title: agreements
  version: 0.1.0
  description: API to create, read, and update agreements.
paths:
  /api/v1/agreements/search:
    post:
      operationId: find-agreement
      summary: Find agreements by type and metering point, and optionally period
      security:
        - JWTAuth: []
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/headers/x-document-date-time'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/headers/x-document-identification'
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  marketParticipantContext:
                    $ref: '#/components/schemas/marketParticipantContext'
                  agreementAttributes:
                    $ref: '#/components/schemas/agreementAttributes'
      description: >-
        Submit at least of the customer identification or meter identification or agreement ID to receive the agreement details, with optional filtering using the period or agreement type
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/headers/status'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/headers/x-document-date-time'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/agreementResponse'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/agreements:
    post:
      operationId: request-agreement
      summary: Create an agreement
      security:
        - JWTAuth: []
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/headers/x-document-date-time'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/headers/x-document-identification'
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  marketParticipantContext:
                    $ref: '#/components/schemas/marketParticipantContext'
                  agreement:
                    type: array
                    items:
                      $ref: '#/components/schemas/agreement'
        description: >-
          Submit the agreements object to create agreement
      responses:
        '201':
          description: Created
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/headers/status'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/headers/x-document-date-time'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  maxLength: 50
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
    put:
      operationId: update-agreement
      summary: Update agreements
      security:
        - JWTAuth: []
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/headers/x-document-date-time'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/headers/x-document-identification'
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  marketParticipantContext:
                    $ref: '#/components/schemas/marketParticipantContext'
                  agreementChange:
                    type: array
                    items:
                      $ref: '#/components/schemas/agreementChange'
        description: >-
          Submit the agreements object with their IDs to update agreements
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/headers/status'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/headers/x-document-date-time'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  maxLength: 50
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
  /api/v1/agreements/delete:
    post:
      operationId: delete-agreement
      summary: Delete agreement by submitting an identical request
      security:
        - JWTAuth: []
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/headers/x-document-date-time'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/headers/x-document-identification'
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  senderContext:
                    $ref: '#/components/schemas/marketParticipantContext'
                  agreementDelete:
                    type: array
                    items:
                      type: object
                      properties:
                        agreementId:
                          type: string
                          maxLength: 50
                        serviceProviderEic:
                          $ref: '#/components/schemas/eic'
      description: >-
        Submit the agreement ID to delete the identified object
      responses:
        '200':
          description: OK
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/headers/status'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/headers/x-document-date-time'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/headers/x-document-identification'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  maxLength: 50
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example:
        > Authorization: Bearer <token>
  schemas:
    dateTime:
      type: string
      format: datetime
      description: ISO 8601 zone datetime
      # RegEx to verify the yyyy-MM-ddTHH:mm:ssZ format
      pattern: >-
        [0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?
    date:
      type: string
      format: date
      description: ISO 8601 date
      # RegEx to verify the yyyy-MM-dd format
      pattern: >-
        [0-9]{4}-[0-9]{2}-[0-9]{2}
    uniqueId:
      type: string
      format: uuid
      description: UUID
      minLength: 36
      maxLength: 36
      # RegEx to verify the UUID format
      pattern: >-
        ^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$
    statusCode:
      type: integer
      description: HTTP status code
      minLength: 3
      maxLength: 3
    eic:
      type: string
      format: eic
      description: EIC code
      minLength: 16
      maxLength: 16
      # RegEx to verify the EIC format, semantic verification is part of content validation
      pattern: >-
        \d{2}[XYZWTVA][A-Z0-9\-]{12}[A-Z0-9]
    agreementType:
      type: string
      description: Agreement type 
      enum: [GRID, SUPPLY, AGGREGATION, NAMED_SUPPLIER, PORTFOLIO_SUPPLIER, JOINT_INVOICE]
    agreement:
      type: object
      properties:
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
         type: boolean
        dateStart:
          $ref: '#/components/schemas/date'
        datedEnd:
          $ref: '#/components/schemas/date'
      required:
        - meterEic
        - agreementType
        - serviceProviderEic
        - customerEic
        - dateStart
        - datedEnd
    agreementResponse:
      type: object
      properties:
        agreementId:
          type: string
          maxLength: 50
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
         type: boolean
        dateStart:
          $ref: '#/components/schemas/date'
        dateEnd:
          $ref: '#/components/schemas/date'
        version:
          type: integer
          minimum: 1
      required:
        - agreementId
        - meterEic
        - agreementType
        - serviceProviderEic
        - customerEic
        - dateStart
        - dateEnd
    agreementChange:
      type: object
      properties:
        agreementId:
          type: string
          maxLength: 50
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
         type: boolean
        dateStart:
          $ref: '#/components/schemas/date'
        dateEnd:
          $ref: '#/components/schemas/date'
      required:
        - agreementId
    agreementAttributes:
      type: object
      properties:
        agreementId:
          type: string
          maxLength: 50
        meterEic:
          $ref: '#/components/schemas/eic'
        agreementType:
          $ref: '#/components/schemas/agreementType'
        serviceProviderEic:
          $ref: '#/components/schemas/eic'
        customerEic:
          $ref: '#/components/schemas/eic'
        preliminaryTerminationFee:
         type: boolean
        dateStart:
          $ref: '#/components/schemas/date'
        dateEnd:
          $ref: '#/components/schemas/date'
      anyOf:
        - required: [agreementId]
        - required: [meterEic]
        - required: [customerEic]
        - required: [serviceProviderEic]
    marketParticipantContext:
      type: object
      properties:
        marketParticipantIdentification:
          $ref: '#/components/schemas/eic'
        marketParticipantRole:
          type: string
          maxLength: 50
        purpose:
          type: string
          maxLength: 50
        commodityType:
          type: string
          enum: [ELECTRICITY, NATURAL_GAS]
      required:
        - marketParticipantIdentification
        - marketParticipantRole
        - commodityType
    badRequest:
      type: object
      description: Bad Request
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unauthorized:
      type: object
      description: Unauthorized
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    forbidden:
      type: object
      description: Forbidden
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    notFound:
      type: object
      description: Not found
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unprocessableEntity:
      type: object
      description: Unprocessable entity
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    defaultProblem:
      type: object
      description: Default problem object
      properties:
        code:
          type: string
        message:
          type: string
        cause:
          $ref: '#/components/schemas/defaultProblem'
  headers:
    status:
      deprecated: false
      required: false
      schema:
        $ref: '#/components/schemas/statusCode'
    x-document-date-time:
      deprecated: false
      required: true
      schema:
        $ref: '#/components/schemas/dateTime'
    x-document-identification:
      deprecated: false
      required: true
      schema:
        $ref: '#/components/schemas/uniqueId'
    x-original-document-identification:
      deprecated: false
      required: false
      schema:
        $ref: '#/components/schemas/uniqueId'
  responses:
    badRequest:
      description: Bad Request
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/headers/status'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/headers/x-document-date-time'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: Unauthorized
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/headers/status'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/headers/x-document-date-time'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorized'
    forbidden:
      description: Forbidden
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/headers/status'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/headers/x-document-date-time'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    notFound:
      description: Not found
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/headers/status'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/headers/x-document-date-time'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessableEntity:
      description: Unprocessable entity
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/headers/status'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/headers/x-document-date-time'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/headers/x-document-identification'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unprocessableEntity'
servers:
  - url: https://test-newavp.elering.ee
security:
  - JWTAuth: []