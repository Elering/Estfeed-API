openapi: 3.0.3
info:
  title: Authorization
  version: 0.1.0
  description: API to create user role
tags:
  - name: Authorization
    description: API to create user role
paths:
  /api/v1/authorization:
    post:
      tags:
        - Authorization
      operationId: create-user-authorization
      summary: Create user authorization
      security:
        - JWTAuth: [ ]
      parameters:
        - in: header
          name: x-document-date-time
          description: Document creation timestamp
          required: true
          schema:
            $ref: '#/components/schemas/dateTime'
        - in: header
          name: x-document-identification
          description: Document unique identification
          required: true
          schema:
            $ref: '#/components/schemas/uniqueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                marketParticipantContext:
                  $ref: '#/components/schemas/marketParticipantContext'
                authorization:
                  $ref: '#/components/schemas/authorization'
              required:
                - marketParticipantContext
                - authorization
      responses:
        '201':
          description: Created
          headers:
            status:
              description: HTTP status code
              schema:
                $ref: '#/components/schemas/statusCode'
            x-document-date-time:
              description: Document creation timestamp
              schema:
                $ref: '#/components/schemas/dateTime'
            x-document-identification:
              description: Document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
            x-original-document-identification:
              description: Request document unique identification
              schema:
                $ref: '#/components/schemas/uniqueId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorizationResponse'
        "400":
          $ref: '#/components/responses/badRequest'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/notFound'
        "422":
          $ref: '#/components/responses/unprocessableEntity'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example:
        > Authorization: Bearer <token>
  schemas:
    dateTime:
      type: string
      format: date-time
      description: ISO 8601 zone datetime
    uniqueId:
      type: string
      format: uuid
      description: UUID
    statusCode:
      type: integer
      description: HTTP status code
      minLength: 3
      maxLength: 3
    eic:
      type: string
      format: eic
      description: EIC code
      minLength: 16
      maxLength: 16
      # RegEx to verify the EIC format, semantic verification is part of content validation
      pattern: >-
        \d{2}[XYZWTVA][A-Z0-9\-]{12}[A-Z0-9]
    serviceProviderRole:
      type: string
      enum: [ OPEN_SUPPLIER, GRID_OPERATOR, LINE_OPERATOR, CLOSED_DISTRIBUTION_NETWORK, PRODUCER_OPERATOR, CHARGING_POINT_OPERATOR, AGGREGATOR,  ENERGY_SERVICE_PROVIDER ]
    commodityType:
      type: string
      enum: [ ELECTRICITY, NATURAL_GAS ]
    marketParticipantContext:
      type: object
      properties:
        marketParticipantIdentification:
          $ref: '#/components/schemas/eic'
        marketParticipantRole:
          $ref: '#/components/schemas/serviceProviderRole'
        purpose:
          type: string
          maxLength: 50
        commodityType:
          $ref: '#/components/schemas/commodityType'
      required:
        - marketParticipantIdentification
        - marketParticipantRole
        - commodityType
    authorization:
      type: object
      properties:
        userRoleId:
          type: array
          items:
            type: string
          example: [ C49DFEB7-040B-422F-82EF-BE14FDFA8700, B929D8B9-CB15-46DB-9B74-0D8EF7F69D00 ]
        userInternalId:
          type: string
          example: 2BF636F4-3B3D-11ED-A261-0242AC120002
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
      required:
        - userRoleId
        - userInternalId
        - validFrom
    authorizationResponse:
      type: object
      properties:
        serviceProviderInternalId:
          type: string
          example: 2BF636F4-3B3D-11ED-A261-0242AC120002
        serviceProviderRole:
          $ref: '#/components/schemas/serviceProviderRole'
        commodityType:
          $ref: '#/components/schemas/commodityType'
        userRoleId:
          type: array
          items:
            type: string
          example: [ C49DFEB7-040B-422F-82EF-BE14FDFA8700, B929D8B9-CB15-46DB-9B74-0D8EF7F69D00 ]
        userInternalId:
          type: string
          example: 2BF636F4-3B3D-11ED-A261-0242AC120002
        validFrom:
          $ref: '#/components/schemas/dateTime'
        validTo:
          $ref: '#/components/schemas/dateTime'
    badRequest:
      type: object
      description: Bad Request
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unauthorized:
      type: object
      description: Unauthorized
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    forbidden:
      type: object
      description: Forbidden
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    notFound:
      type: object
      description: Not found
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    unprocessableEntity:
      type: object
      description: Unprocessable entity
      properties:
        problem:
          $ref: '#/components/schemas/defaultProblem'
    defaultProblem:
      type: object
      description: Default problem object
      properties:
        code:
          type: string
        message:
          type: string
        cause:
          $ref: '#/components/schemas/defaultProblem'
  responses:
    badRequest:
      description: Bad Request
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/badRequest'
    unauthorized:
      description: Unauthorized
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unauthorized'
    forbidden:
      description: Forbidden
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    notFound:
      description: Not found
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notFound'
    unprocessableEntity:
      description: Unprocessable entity
      headers:
        status:
          description: HTTP status code
          schema:
            $ref: '#/components/schemas/statusCode'
        x-document-date-time:
          description: Document creation timestamp
          schema:
            $ref: '#/components/schemas/dateTime'
        x-document-identification:
          description: Document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
        x-original-document-identification:
          description: Request document unique identification
          schema:
            $ref: '#/components/schemas/uniqueId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unprocessableEntity'
servers:
  - url: https://test-datahub.elering.ee
security:
  - JWTAuth: []